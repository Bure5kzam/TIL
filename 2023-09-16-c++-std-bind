---
layout: post
title: c++ std::bind
date: 2023-09-15 10:18
category: c++
author: Bure5kzam
tags: []
summary:
---

std::bind
> template< class F, class... Args >
> /* unspecified */ bind( F&& f, Args&&... args );
> (since C++11)
> (until C++20)

함수 템플릿 std:bind는 f를 위한 forwarding call wrapper를 생성한다.

이 wrapper를 호출하는 것은 f에 주어진 인자들을 args에 바운딩하여 호출하는 것과 같다.

* wrapper : 추가 계산이 거의 없이 서브루틴을 호출하는 것이 주 목적인 소프트웨어 라이브러리
            https://en.wikipedia.org/wiki/Wrapper_function

## std::bind 의 반환 형식**

1. 멤버 객체

std::bind의 반환 타입은 `std::forward<F>(f)`에서 생성되는 `std::decay<F>` 타입의 맴버 객체와 각각의 args...에 대응하는 오브젝트들을 갖고 있는다.(유사하게 `std::forward<Arg_i>(arg_i)` 에서 생성된 `std::decay<Arg_i>::type`)

2. 생성자

std::bind의 반환 타입은 만약 모든 bind가 가진 모든 멤버 객체(위에서 말한)가 Copy Contructuble하면 CopyConstructible이며, 그렇지 않으면 MoveContstructible이다. 타입은 아래의 멤버를 정의한다.

> 멤버 타입 result_type
>
> 1) 만약 F가 함수 또는 멤버함수를 가리키는 포인트일 경우, result_type은 F의 반환 결과물이다.
>    만약 F 가 클래스 내부에 중첩된 typedef인 result_type일 경우, result_type은 F::result_type이 된다.
>    그렇지 않으면 result_type가 정의되지 않는다.
>
> 2) result_type 은 정확히 R이다.
>
> 멤버 함수 연산자 ()
>
> g가 함수 호출 표현식에서 호출될 경우 (g(u1, u2,...uM 형태로)), 마치 아래 호출문이 실행된 것처럼 저장된 객체의 호출이 발생한다.
>
>  1) Invoke(fd, std::forward<V1>(v1)), std::forward<V2>(v2), ...
>  2) Invoke<R>(fd, std::forward<V1>(v1)), std::forward<V2>(v2), ...,
>
> 여기서 fd 는 std::decay<F>::type의 타입 값이고, 바운드 아규먼트 v1, v2의 타입과 값은 아래와 같이 결정된다.
>
> 만약 g() 호출문에 의해 주어진 몇몇의 argument 들이 g에 저장된 아무 placeholder 에도 매치되지 않을 경우, 사용되지 않은 argument 들은 평가되고 버려진다.
>
> operator() 연산자의 호출은 non-throwing 이면서 상수 하위 표현식일 수 있습니다(?) operator() 연산자는 INVOKE 연산이 평가되지 않은 피연산자 일 때 올바른 형식일 경우에만 오버로드에 참가한다.
>
> 만약 g가 volatile이면 프로그램은 잘못된 형식이다.
> 만약 INVOKE(fd, w1, w2, ...wN)가 w1, w2에 대해 유효한 표현식이 될 수 없는 경우, begavior는 정의되지 않는다.

## Bound arguments

각각의 저장된 아규먼트 arg_i에 대해서, INVOKE, INVOKE<R> 연산자 내의 대응되는 바운드 아규먼트 v_i는 아래에 의해 결정된다.

case 1: 참조 래퍼

만약 arg_i가 std::reference_wrapper<T> 일 경우, (예를 들면 std::ref나 std::cref 가 std::bind에 의한 초기화 호출 안에서 사용될 경우), v_i는 arg_i.get()이고 V_i의 타입은 T& 이다. 저장된 아규먼트는 호출된 함수 객체에 참조로 전달된다.

case 2: bind 표현식

만약 arg_i 가 std::is_bind_expression<T>::value 가 true인 유형에 속할 경우 (예를 들면 다른 std::bind 표현식이 직접 bind 초기화 호출에 전달되었을 경우), std::bind 는 함수 구성을 수행합니다. 바인드 하위표현식이 반환할 함수 객체를 전달하는 대신, 하위표현식이 실행되고 반환값이 외부 실행가능한 객체로 전달됩니다.

case 3: placeholders

만약 arg_i가 std::is_placeholder<T>::value가 0이 아닌 유형에 속할 경우 (_1, _2, _3 이 std::bind의 초기화 호출 인자로 사용되었을 경우), placeholder에 의해 나타내지는 인자 (_1는 u1, _2는 u2, etc)가 호출가능한 객체로 전달된다. v_1 는 std::forward<Uj>(uj) 이고 V_i의 타입은 Uj&&이다.

case 4: 일반적인 인수

그렇지 않으면 arg_i 는 호출 가능한 객체에게 lvalue 인자로 전달된다.
v_i 는 arg_i 이고 타입은 T cv&가 된다. cv는 cv-qualification을 나타낸다.

* cv-qualification : 변수의 타입에 대한 특정한 제한사항

## Notes

Callable에서 묘사된 것 처럼, static이 아닌 멤버 함수나 데이터 멤버를 향하는 포인터를 호출할 때, 첫 번째 인자는 멤버가 엑세스 가능한 객체를 가리키는 참조나 포인터가 되어야 한다. (std::shared_ptr나 std::unique_ptr 같은 스마트 포인터 같은 것들)


