
ros2 노드 구성 로직에 builder 패턴을 적용한 사례를 정리해보았다.

# 개요

`handling node`는 프로세스를 제어하는 `process` `get_result` 같은 메서드를 갖는다.

프로세스 종류에 따라 `cancel`, `pause` 등의 메서드가 필요하지만 다 필요한 것은 아니다.

프로세스별로 적절한 메서드를 추가하기 위해 `builder pattern`을 적용했다.


```python

class Builder_ActionImplNode(ABC):
	def reset(self, node : ActionImplHandlingNode, param : ActionTypeParamInterface):
	
	self.node = node
	# self.node.param = param

  

	@abstractmethod
	def set_call_process(self, cls_typ : str):
		pass
		
	def create_call_process(self, srv_typ, srv_name, callback_process_async):
		self.node.srv_cli_process = self.node.create_client(srv_type=srv_typ, srv_name=srv_name
, callback_group = self.node.callback_out
	)
	self.node.call_process_async = types.MethodType(callback_process_async, self.node)

	def create_sub_state(self, sub_state_typ, sub_state_nm, callback_sub_state):
		self.node.callback_sub_state = types.MethodType(callback_sub_state, self.node)
		self.node.sub_state = self.node.create_subscription(
			msg_type= sub_state_typ
			, topic= sub_state_nm
			, callback=self.node.callback_sub_state
			, qos_profile= 10
			)
		console.loginfo(f"subscription add, \"{self.node.sub_state.topic_name}\"")
	
	def get_result(self) -> Node:
		return self.node
	
	
	@abstractmethod	
	def set_sub_state(self, cls_typ : str):
	
		pass
		
```



# 느낀 점 

## 잘 적용한걸까??

빌드 패턴의 목적은 두 가지가 있는 것 같다.

-  **같은 프로세스**를 **서로 다른 객체(production)**에 적용하고 **프로세스를 객체화(Director)** 하기 위함. (production 별 프로세스를 적용하기 위한 방법은 builder로 정의)
- 객체(production)의 생성자에 전달할 파라미터를 정리하기 위함 
- 객체(production)의 속성 구성 방법을 더 체계적으로 보이기 위함 (생성자 내부 로직을 builder의 메서드에서 위임)


결론부터 정리하면 잘못 적용한 것 같다.

 이번에 패턴을 적용한건 클래스의 멤버(process, get_result 등)를 여러 방법으로 구성하기 위한 방법을 찾는 과정이었다. 빌더로 멤버를 추가하니 관리하기는 편했는데, 아무래도 클래스 멤버를 런타임에 추가할 수 있는 파이썬에서나 시도할 수 있는 기행이었던 것 같다. 오히려 호출부에서 멤버 정보를 알아볼 방법이 없어 비정상적인 코드가 되었다.
